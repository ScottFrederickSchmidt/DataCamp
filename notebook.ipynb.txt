{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9a9ada08-c9f0-466f-91a0-265fa539f9f5",
   "metadata": {},
   "source": [
    "# Should your fund invest in Bitcoin?\n",
    "\n",
    "## 📖 Background\n",
    "You work as an analyst at an investment fund in New York. Your CFO wants to explore if it is a good idea to invest some of the fund's assets in Bitcoin. You have to prepare a report on this asset and how it compares to the stock market in general."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32ad53c0",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "5565492a",
   "metadata": {},
   "source": [
    "# Should your fund invest in Bitcoin?\n",
    "\n",
    "## 📖 Background\n",
    "You work as an analyst at an investment fund in New York. Your CFO wants to explore if it is a good idea to invest some of the fund's assets in Bitcoin. You have to prepare a report on this asset and how it compares to the stock market in general."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10dcc269-3659-4851-99cd-f1ffb7f818aa",
   "metadata": {
    "tags": []
   },
   "source": [
    "## 💾 The data\n",
    "You have access to three files:\n",
    "\n",
    "#### Bitcoin daily data in US dollars\n",
    "- \"date\" - date from September 17, 2014 to November 17, 2021\n",
    "- \"open\" - the price at the beginning of the trading day\n",
    "- \"high\" - the highest price reached that day\n",
    "- \"low\" - the lowest price reached that day\n",
    "- \"close\" - the price at the closing of the trading day\n",
    "- \"volume\" - how many Bitcoin were traded that day\n",
    "\n",
    "#### S&P 500 daily data\n",
    "- \"date\" - date from September 17, 2014 to November 17, 2021\n",
    "- \"open\" - the index level at the beginning of the trading day\n",
    "- \"high\" - the highest level reached that day\n",
    "- \"low\" - the lowest level reached that day\n",
    "- \"close\" - the level at the closing of the trading day\n",
    "- \"volume\" - how many shares in the companies that make up the index were traded that day\n",
    "\n",
    "#### inflation and gold as monthly data\n",
    "- \"date\" - date from September, 2014 to November, 2021\n",
    "- \"gold_usd\" - price in usd of gold for that month\n",
    "- \"cpi_us\" - the inflation index for the US for that month (cpi = consumer price index)\n",
    "\n",
    "_CPI data from the [U.S. Bureau of Labor Statistics](https://www.bls.gov/cpi/). Publicly available information_."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "40251159-3eea-47f8-bfb4-09e38d5ced65",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "#BITCOIN DATA MANIPULATION:\n",
    "btcDF = pd.read_csv('./data/bitcoin-usd.csv', parse_dates=['date']).filter(['date', 'close']).rename(columns={'close': 'btc'}, inplace=False)\n",
    "btcDF['date'] = btcDF['date'].astype(str) #must change date to str see above reference\n",
    "btcDF['day'] = btcDF['date'].str[-2:] #last two digits are the day\n",
    "btcDF=btcDF.loc[btcDF['day'].str.contains('01')].reset_index(drop=True)\n",
    "btcDF['date'] = btcDF['date'].apply(pd.to_datetime) #change date back to date type before a JOIN merge\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "a03cfa33-8c50-4e87-9669-1879fc88a8a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#SP500 Data Manipulation:\n",
    "spyDF = pd.read_csv('./data/sp500.csv', parse_dates=['date']).filter(['date', 'close']).rename(columns={'close': 'SP500'}, inplace=False)\n",
    "spyDF['date'] = spyDF['date'].astype(str) #must change date to str see above reference\n",
    "spyDF['day'] = spyDF['date'].str[-2:] #last two digits are the day\n",
    "spyDF=spyDF.loc[spyDF['day'].str.contains('01')].reset_index(drop=True)\n",
    "spyDF['date'] = spyDF['date'].apply(pd.to_datetime) #change date back to date type before a JOIN merge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "57c4f3ed-792a-4ff9-9d17-2f1b98a18127",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='date'>"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# CPI/GOLD DATA:\n",
    "monthlyDF = pd.read_csv('./data/monthly_data.csv', parse_dates=['date'])\n",
    "head=monthly_data.head()  #date  gold_usd   cpi_us\n",
    "\n",
    "#MERGE THE THREE DATAFRAMES:\n",
    "finalDF = pd.merge(btcDF, monthlyDF, on='date', how='outer').reset_index(drop=True)\n",
    "finalDF = pd.merge(finalDF, spyDF, on='date', how='outer').reset_index(drop=True)\n",
    "finalDF = finalDF.dropna() \n",
    "finalDF= finalDF.drop(['day_x', 'day_y'], axis=1, inplace=False).reset_index(drop=True)\n",
    "head=finalDF.head() # date  btc  gold_usd   cpi_us SP500\n",
    "\n",
    "#PLOT DATA:\n",
    "import matplotlib.pyplot as plt\n",
    "# df.plot(x=\"Rank\", y=[\"P25th\", \"Median\", \"P75th\"])\n",
    "finalDF.plot(x='date', y=['btc', 'gold_usd', 'SP500', 'gold_usd'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "846e3a7b-7ab6-49a3-88db-103a70e6cbaa",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "FAILED ATTEMPTS:\n",
    "df['month'] = (df['purchase_date'].dt.floor('d') + \n",
    "                           pd.offsets.MonthEnd(0) - pd.offsets.MonthBegin(1))\n",
    "                           \n",
    "btcDF['month'] = (btcDF['date'].dt.floor('d') + \n",
    "                           pd.offsets.MonthEnd(0) - pd.offsets.MonthBegin(1))\n",
    "                           \n",
    "btcDF['month'] = btcDF['date'].apply(lambda x: x.strftime('%Y-%m-01'))\n",
    "'''"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54e0ae0c-ff96-443e-9ff3-718f1ab846e5",
   "metadata": {},
   "source": [
    "## 💪 Competition challenge\n",
    "Create a report that covers the following:\n",
    "\n",
    "1. How does the performance of Bitcoin compare to the S&P 500 and the price of gold?\n",
    "2. Analyze Bitcoin's returns and volatility profile. Do you believe it could help improve the performance of a portfolio? Do you believe Bitcoin could be used as a hedge versus inflation?\n",
    "3. The CFO is looking to lower volatility in the fund. Explore building a portfolio using some or all of these assets. Make a recommendation that minimizes overall risk."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efda8e32-5c7e-48cc-8bd6-83ad3ba72f6e",
   "metadata": {},
   "source": [
    "## 🧑‍⚖️ Judging criteria\n",
    "\n",
    "| CATEGORY | WEIGHTING | DETAILS                                                              |\n",
    "|:---------|:----------|:---------------------------------------------------------------------|\n",
    "| **Recommendations** | 35%       | <ul><li>Clarity of recommendations - how clear and well presented the recommendation is.</li><li>Quality of recommendations - are appropriate analytical techniques used & are the conclusions valid?</li><li>Number of relevant insights found for the target audience.</li></ul>       |\n",
    "| **Storytelling**  | 30%       | <ul><li>How well the data and insights are connected to the recommendation.</li><li>How the narrative and whole report connects together.</li><li>Balancing making the report in depth enough but also concise.</li></ul> |\n",
    "| **Visualizations** | 25% | <ul><li>Appropriateness of visualization used.</li><li>Clarity of insight from visualization.</li></ul> |\n",
    "| **Votes** | 10% | <ul><li>Up voting - most upvoted entries get the most points.</li></ul> |"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fa68a10-14d8-4db9-a473-9efdab8f2fbd",
   "metadata": {},
   "source": [
    "## ✅ Checklist before publishing into the competition\n",
    "- Rename your workspace to make it descriptive of your work. N.B. you should leave the notebook name as notebook.ipynb.\n",
    "- Remove redundant cells like the judging criteria so the workbook is focused on your story.\n",
    "- Make sure the workbook reads well and explains how you found your insights.\n",
    "- Check that all the cells run without error."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3bef7acb-5b00-4282-8c3e-1aa34bf4b7df",
   "metadata": {},
   "source": [
    "## ⌛️ Time is ticking. Good luck!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61d09a65-7a7f-43de-951b-decb042f5bd0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
