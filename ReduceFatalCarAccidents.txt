{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "prostate-arizona",
   "metadata": {
    "id": "bA5ajAmk7XH6"
   },
   "source": [
    "# Reducing the number of high fatality accidents\n",
    "\n",
    "## 📖 Background\n",
    "You work for the road safety team within the department of transport and are looking into how they can reduce the number of major incidents. The safety team classes major incidents as fatal accidents involving 3+ casualties. They are trying to learn more about the characteristics of these major incidents so they can brainstorm interventions that could lower the number of deaths. They have asked for your assistance with answering a number of questions."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "suspected-substitute",
   "metadata": {
    "id": "TAezigD_8u-1"
   },
   "source": [
    "## 💾 The data\n",
    "The reporting department have been collecting data on every accident that is reported. They've included this along with a lookup file for 2020's accidents.\n",
    "\n",
    "*Published by the department for transport. https://data.gov.uk/dataset/road-accidents-safety-data* \n",
    "*Contains public sector information licensed under the Open Government Licence v3.0.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "uniform-isolation",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Calculating accident count day of week: \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'\\nOn what areas would you recommend the planning team focus their brainstorming efforts to reduce major incidents?\\n'"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "What time of day and day of the week do most major incidents happen?\n",
    "Are there any patterns in the time of day/ day of the week when major incidents occur?\n",
    "What characteristics stand out in major incidents compared with other accidents?\n",
    "'''\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import datetime\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "accidents = pd.read_csv(r'./data/accident-data.csv')\n",
    "aDF = pd.DataFrame(accidents).dropna() #there was no empty data\n",
    "#print(df.columns)\n",
    "\n",
    "#DATE TIME DATAFRAME:\n",
    "timeDF=aDF.filter([\"accident_index\", \"number_of_casualties\", \"date\", \"day_of_week\", \"time\"])\n",
    "timeDF=timeDF[timeDF['number_of_casualties']>2].reset_index(drop=True)\n",
    "\n",
    "nums=[]\n",
    "weekday=[\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n",
    "print(\"Calculating accident count day of week: \")\n",
    "for i in range(1, 8):\n",
    "    day = timeDF[timeDF['day_of_week'] == i]\n",
    "    count=day['day_of_week'].count()\n",
    "    nums.append(count)\n",
    "    #print(count, \" on \", weekday[i-1]) \n",
    "#print(\"Done counting accident count in day of week.\")\n",
    "\n",
    "#First plot:\n",
    "plt.bar(weekday, nums)\n",
    "plt.xlabel('Weekday')\n",
    "plt.ylabel('Number Accidents')\n",
    "plt.title('Number Accidents per Weekday')\n",
    "plt.show()\n",
    "\n",
    "'''\n",
    "Calculating accident count day of week: \n",
    "687  on  Monday\n",
    "614  on  Tuesday\n",
    "621  on  Wednesday\n",
    "632  on  Thursday\n",
    "645  on  Friday\n",
    "798  on  Saturday\n",
    "820  on  Sunday\n",
    "Done counting accident count in day of week.\n",
    "'''\n",
    "\n",
    "'''\n",
    "On what areas would you recommend the planning team focus their brainstorming efforts to reduce major incidents?\n",
    "'''\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "392721f3-bc55-4bc1-9e7d-c6b1dd5f3be6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{0: 94, 1: 73, 2: 54, 3: 48, 4: 33, 5: 41, 6: 65, 7: 110, 8: 197, 9: 149, 10: 211, 11: 242, 12: 272, 13: 312, 14: 372, 15: 401, 16: 433, 17: 374, 18: 341, 19: 286, 20: 232, 21: 159, 22: 181, 23: 137}\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'\\nThe graph shows that most accidents happen between hours 14 and 18. \\nThis would be between 2 and 6pm.\\nThe most accidents happen at 4pm around when most people get off work so it is not surprising.\\n'"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "What time do most accidents happen?\n",
    "'''\n",
    "from datetime import datetime\n",
    "\n",
    "hours=list(timeDF['time'].astype(str).str[:2])\n",
    "hoursDic={} #store into dictionary with hours by key and number accidents as values\n",
    "\n",
    "for i in range(0,10):\n",
    "    count=hours.count('0'+str(i))\n",
    "    hoursDic[i]=count\n",
    "for i in range(10,24):\n",
    "    count=hours.count(str(i))\n",
    "    hoursDic[i]=count\n",
    "    \n",
    "print(hoursDic)\n",
    "\n",
    "plt.bar(hoursDic.keys(),hoursDic.values())\n",
    "plt.title('Accidents on an Hourly Basis')\n",
    "plt.xlabel('Time of Accident by Hour')\n",
    "plt.ylabel('Number Accidents')\n",
    "plt.show()\n",
    "\n",
    "'''\n",
    "The graph shows that most accidents happen between hours 14 and 18. \n",
    "This would be between 2 and 6pm.\n",
    "The most accidents happen at 4pm around when most people get off work so it is not surprising.\n",
    "'''\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "be13e6d2-9311-4b88-9028-78dcc69e6154",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top ten most dangerous locations: \n",
      "Lat    Long   Count \n",
      "-0.165   1.52    91\n",
      "-0.135   1.43    75\n",
      "-0.151   .5    74\n",
      "-0.175   1.52    71\n",
      "-0.135   1.51    70\n",
      "-0.145   1.54    70\n",
      "-0.065   1.51    65\n",
      "-0.075   1.52    64\n",
      "-0.145   1.52    64\n",
      "-0.075   1.58    62\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'\\nTop ten most dangerous locations: \\nLat    Long   Count \\n-0.165   1.52    91\\n-0.135   1.43    75\\n-0.151   .5    74\\n-0.175   1.52    71\\n-0.135   1.51    70\\n-0.145   1.54    70\\n-0.065   1.51    65\\n-0.075   1.52    64\\n-0.145   1.52    64\\n-0.075   1.58    62\\n'"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "#LocDF will locate the most common places for accidents using longitude and latitude.\n",
    "'''\n",
    "\n",
    "locDF=aDF.filter(['longitude', 'latitude']).round(2)\n",
    "locDF = locDF.applymap(str) #need to combine two numbers in next step\n",
    "locDF['Loc']=locDF['longitude']+ locDF['latitude'] #combines two dataframes as str. Now, count to see if same number populates.\n",
    "loc=sorted(list(locDF['Loc']))\n",
    "\n",
    "from collections import Counter\n",
    "count=Counter(loc) #counts how many in a given list\n",
    "topTen=count.most_common(10) #only need the top ones\n",
    "\n",
    "print(\"Top ten most dangerous locations: \")\n",
    "print(\"Lat  \" , \" Long \", \" Count \")\n",
    "for t in topTen:\n",
    "    lat=t[0][:6]\n",
    "    long=t[0][6:]\n",
    "    count=t[1]\n",
    "    print(lat, \" \", long, \"  \", count)\n",
    "    \n",
    "'''\n",
    "Top ten most dangerous locations: \n",
    "Lat    Long   Count \n",
    "-0.165   1.52    91\n",
    "-0.135   1.43    75\n",
    "-0.151   .5    74\n",
    "-0.175   1.52    71\n",
    "-0.135   1.51    70\n",
    "-0.145   1.54    70\n",
    "-0.065   1.51    65\n",
    "-0.075   1.52    64\n",
    "-0.145   1.52    64\n",
    "-0.075   1.58    62\n",
    "'''\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "40fd7dcb-b77b-4c4d-8f06-1365225e7496",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Here are the top ten accident types: \n",
      "                                         table\n",
      "field name                                    \n",
      "junction_detail                             11\n",
      "weather_conditions                          10\n",
      "carriageway_hazards                         10\n",
      "special_conditions_at_site                  10\n",
      "road_surface_conditions                      9\n",
      "road_type                                    8\n",
      "pedestrian_crossing_physical_facilities      8\n",
      "day_of_week                                  7\n",
      "junction_control                             7\n",
      "second_road_class                            7\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'\\nfield name                       \\njunction_detail                11\\nweather_conditions             10\\ncarriageway_hazards            10\\nspecial_conditions_at_site     10\\nroad_surface_conditions         9\\n'"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ldata = pd.read_csv(r'./data/road-safety-lookups.csv')\n",
    "#print(lDF.head()) # table field name code/format label\n",
    "\n",
    "# Total missing values for each feature\n",
    "def checkNA():\n",
    "\tlDF.isnull().sum() \n",
    "'''\n",
    "table            0\n",
    "field name       0\n",
    "code/format      8\n",
    "label           10\n",
    "note           119\n",
    "'''\n",
    "\n",
    "print(\"Here are the top ten accident types: \")\n",
    "lDF = pd.DataFrame(data=ldata, columns=['table', 'field name'])\n",
    "lcount=lDF.groupby(by=['field name']).count().sort_values(by='table', ascending=False).head(10)\n",
    "print(lcount)\n",
    "'''\n",
    "Here are the top ten accident types: \n",
    "                                         table\n",
    "field name                                    \n",
    "junction_detail                             11\n",
    "weather_conditions                          10\n",
    "carriageway_hazards                         10\n",
    "special_conditions_at_site                  10\n",
    "road_surface_conditions                      9\n",
    "road_type                                    8\n",
    "pedestrian_crossing_physical_facilities      8\n",
    "day_of_week                                  7\n",
    "junction_control                             7\n",
    "second_road_class                            7\n",
    "'''"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "recent-boards",
   "metadata": {
    "id": "Rm2MvBfC9mYK",
    "tags": []
   },
   "source": [
    "## 💪 Competition challenge\n",
    "\n",
    "Create a report that covers the following:\n",
    "\n",
    "1. What time of day and day of the week do most major incidents happen?\n",
    "2. Are there any patterns in the time of day/ day of the week when major incidents occur?\n",
    "3. What characteristics stand out in major incidents compared with other accidents?\n",
    "4. On what areas would you recommend the planning team focus their brainstorming efforts to reduce major incidents?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "young-evaluation",
   "metadata": {
    "id": "6zXWKexuHxE9"
   },
   "source": [
    "## 🧑‍⚖️ Judging criteria\n",
    "\n",
    "| CATEGORY | WEIGHTING | DETAILS                                                              |\n",
    "|:---------|:----------|:---------------------------------------------------------------------|\n",
    "| **Recommendations** | 35%       | <ul><li>Clarity of recommendations - how clear and well presented the recommendation is.</li><li>Quality of recommendations - are appropriate analytical techniques used & are the conclusions valid?</li><li>Number of relevant insights found for the target audience.</li></ul>       |\n",
    "| **Storytelling**  | 30%       | <ul><li>How well the data and insights are connected to the recommendation.</li><li>How the narrative and whole report connects together.</li><li>Balancing making the report in depth enough but also concise.</li></ul> |\n",
    "| **Visualizations** | 25% | <ul><li>Appropriateness of visualization used.</li><li>Clarity of insight from visualization.</li></ul> |\n",
    "| **Votes** | 10% | <ul><li>Up voting - most upvoted entries get the most points.</li></ul> |"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0e743f6-4df4-4311-b0d6-7bfafbee8d89",
   "metadata": {},
   "source": [
    "## ✅ Checklist before publishing into the competition\n",
    "- Rename your workspace to make it descriptive of your work. N.B. you should leave the notebook name as notebook.ipynb.\n",
    "- Remove redundant cells like the judging criteria so the workbook is focused on your story.\n",
    "- Make sure the workbook reads well and explains how you found your insights.\n",
    "- Check that all the cells run without error."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b658ba9-df9f-4821-aa4c-674007cf3d25",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "name": "Welcome to DataCamp Workspaces.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
