'''
You work for an early-stage startup in Germany. Your team has been working on a redesign of the landing page. The team believes a new design will increase the number of people who click through and join your site. 

They have been testing the changes for a few weeks and now they want to measure the impact of the change and need you to determine if the increase can be due to random chance or if it is statistically significant.

The team assembled the following file:

"treatment" - "yes" if the user saw the new version of the landing page, no otherwise.
"new_images" - "yes" if the page used a new set of images, no otherwise.
"converted" - 1 if the user joined the site, 0 otherwise.
The control group is those users with "no" in both columns: the old version with the old set of images.
'''

import pandas as pd
df = pd.read_csv('./data/redesign.csv')
#print(df.head()) #  treatment new_images  converted
#print(type(df)) #<class 'pandas.core.frame.DataFrame'>
df = df.replace(to_replace = ['yes','no'],value = [1,0])
df=df.dropna()

'''
What is the correlation of the treatment and new_images individually?
Maybe one column is effective while the other is not?
The following code will find out:
'''

treatmentCorr=df['treatment'].corr(df['converted'])
new_imagesCorr=(df['new_images'].corr(df['converted']))
print(round(treatmentCorr, 4) , " is the treatment correlation.")
print(round(new_imagesCorr, 4) , " is the new images correlation.")

'''
Correlation Summary:
0.0111  is the treatment correlation.
-0.0007  is the new images correlation.

With a correlation close to 0, this shows that there seems to be no correlation between the two individual columns and becoming a customer.
'''


#LOGISTIC REGRESSION:
from sklearn.model_selection import train_test_split # splitting the data
from sklearn.linear_model import LogisticRegression # model algorithm
from sklearn import metrics
import matplotlib.pyplot as plt

#Split the data set into x and y data:
y_data = df['converted']
#x_data = df['new_images']
x_data = df.drop('converted', axis = 1)

#split the dataset into training (70%) and testing (30%) sets:
from sklearn.model_selection import train_test_split
x_training_data, x_test_data, y_training_data, y_test_data = train_test_split(x_data, y_data, test_size = 0.3, random_state=42)
#Logistic regression defaults to L2

#Create the model
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()

#Train the model and create predictions
model.fit(x_training_data, y_training_data)
predictions = model.predict(x_test_data)
#print(predictions)

#Generate a confusion matrix
from sklearn.metrics import confusion_matrix, roc_auc_score

#use model to predict probability that given y value is 1:
y_pred_proba = model.predict_proba(x_test_data)[::,1]

auc = round( metrics.roc_auc_score(y_test_data, y_pred_proba), 4 ) 
print("Logistic model AUC is: ", auc)  # AUC is:  0.5059

'''
LOGISTIC REGRESSION SUMMARY:
With logistic regression using both treatment and new_image columns,
the AUC was 0.5059. This shows little to no correlation between the new website and attracting new customers.
'''



'''
FINAL SUMMARY:
With logistic regression using both treatment and new_image columns,
the AUC was 0.5059. This shows no correlation between the new website.

0.0111  is the treatment correlation.
-0.0007  is the new images correlation.
AUC is:  0.5059

With a correlation close to 0, this shows that there seems to be no correlation between the two individual columns and becoming a customer.
'''

